default:
  tags:
    - docker
stages:
  - build
  - test
  - make_release
  - deploy
  - cleanup

workflow:
  rules: 
    - if: '$CI_COMMIT_BRANCH != "main" &&  $CI_COMMIT_TAG != "null" && $CI_COMMIT_MESSAGE !~ /adding version/'
      when: always

build:
  stage: build
  image: docker
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker build --no-cache -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE
  rules: 
    - if: '$CI_COMMIT_MESSAGE =~ /build_image/'


test:
  stage: test
  image: $CI_REGISTRY_IMAGE:latest
  script:
    - pwd
    - ls -lrta
    - pip install .
    - pip install -r requirements.txt
    - jtable -h || true
    - cd doc/examples
    - ./make_doc.sh --halt
    - ./diff_doc.sh ref_README.md README.md "^[0-2][0-9]:[0-6][0-9]:[0-6][0-9]"
    - 'echo debug CI_COMMIT_MESSAGE: "$CI_COMMIT_MESSAGE"'
    - 'echo debug CI_COMMIT_MESSAGE: $CI_COMMIT_MESSAGE'
  rules:
    - if: '$CI_COMMIT_BRANCH != "main"'


make_release:
  # before_script:
  #   - sudo su -
  stage: make_release
  image:
    name: $CI_REGISTRY_IMAGE:latest
  variables:
    SECURE_FILES_DOWNLOAD_PATH: '.ssh'
  script:
    # - sleep 2000
    - mkdir ../release || true
    - cd ../release
    - rm -rf *
    - echo git clone http://oauth2:${vince_bot_pat}@${CI_SERVER_FQDN}/${CI_PROJECT_PATH}.git
    - git clone http://oauth2:${vince_bot_pat}@${CI_SERVER_FQDN}/${CI_PROJECT_PATH}.git
    - git config --global user.email "vincebot@vince.com"
    - git config --global user.name "Vince bot"
    - cd $CI_PROJECT_NAME
    - git switch ${CI_COMMIT_BRANCH}
    - current_tag=$(git for-each-ref --sort=creatordate --format '%(refname)' refs/tags | tail -1 | cut -d"/" -f3)
    - current_minor_version=$(echo $current_tag | cut -d"." -f3)
    - current_base_version=$(echo $current_tag | cut -d"." -f1,2)
    - new_minor_version=$((current_minor_version + 1))
    - new_version="${current_base_version}.${new_minor_version}"
    - echo "__version__ = '$new_version'" > jtable/version.py
    - git add .
    - git commit -m "${CI_COMMIT_MESSAGE} adding version ${new_version}"
    - git push -f origin ${CI_COMMIT_BRANCH}
    - git switch main
    - git pull origin main
    - git merge ${CI_COMMIT_BRANCH}
    - git push origin main
    - git tag -f $new_version
    - git push origin $new_version
  # rules:
  #   - when: manual


make_windows_setup:
  stage: deploy
  # image: $CI_REGISTRY_IMAGE:latest
  tags:
    - windows
  script:
    - if (-not (Test-Path C:\temp\build)) {New-Item -Path C:\temp\build -ItemType Directory }
    - cd C:\temp\build
    - if ( (Test-Path .\jtable )) {Remove-Item .\jtable -Recurse -Force}
    - git clone http://oauth2:${vince_bot_pat}@${CI_SERVER_FQDN}/${CI_PROJECT_PATH}.git
    - cd c:\temp
    - $Env:USERNAME
    - $Env:LOCALAPPDATA
    # - $env:Path += ";C:\Users\$env:USERNAME\AppData\Local\Microsoft\WindowsApps"
    - |
      if (!(python --version)) {
        echo "Python not found, installing...";
        Invoke-WebRequest -Uri "https://www.python.org/ftp/python/3.11.6/python-3.11.6-amd64.exe" -OutFile "python-installer.exe";
        .\python-installer.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0;
      }
    - python -m venv jtable_env
    - .\jtable_env\Scripts\activate
    - cd C:\temp\build\jtable
    - git pull
    - git switch ${CI_COMMIT_BRANCH}
    - pip install .
    - pip install PyInstaller
    - cd jtable
    - python -m PyInstaller --add-data "C:\temp\build\jtable\jtable\resources\*:resources" --workpath ..\build --specpath ..\build --name jtable.exe --distpath ..\dist --onefile jtable.py
    - cd C:\temp\build\jtable\dist
    - '& "C:\Program Files (x86)\NSIS\makensis.exe" ..\jtable.nsi'
  rules:
    - when: manual
  allow_failure: true



deploy:
  stage: deploy
  image: $CI_REGISTRY_IMAGE:latest
  variables:
    SECURE_FILES_DOWNLOAD_PATH: '.ssh'
  script:
    - cd $HOME
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    # - sleep 2000
    - cd $HOME/.ssh
    # - mv vince_bot_ssh.pub id_rsa.pub
    # - mv vince_bot_ssh.priv id_rsa
    - chmod -R 700 $HOME/.ssh
    - ssh-keyscan github.com >> /home/jtable/.ssh/known_hosts
    - cd $CI_BUILDS_DIR/root/release/$CI_PROJECT_NAME
    - new_version=$(cat jtable/version.py  | awk '{print $3'} | xargs echo)
    - echo $new_version
    - git remote set-url origin git@github.com:vtougne/${CI_PROJECT_NAME}.git
    # - sleep 2000
    - git push origin $new_version
    - git push -f origin main
    - echo $CI_COMMIT_MESSAGE
    - release_name="${CI_COMMIT_MESSAGE//$'\n'/}"
    - |
      curl -f -L \
        -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $GITHUB_TOKEN" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/vtougne/jtable/releases \
        -d '{"tag_name":"'"$new_version"'","target_commitish":"main","name":"'"$new_version"'","body":"'"${release_name}"'","draft":false,"prerelease":false,"generate_release_notes":false}'


cleanup:
  # variables:
  #   SECURE_FILES_DOWNLOAD_PATH: '.ssh'
  stage: cleanup
  image: $CI_REGISTRY_IMAGE:latest
  script:
    - cd $CI_BUILDS_DIR/$CI_PROJECT_ROOT_NAMESPACE/release/jtable
    - git remote set-url origin http://oauth2:${vince_bot_pat}@${CI_SERVER_FQDN}/${CI_PROJECT_PATH}.git
    - git push -d origin ${CI_COMMIT_BRANCH}
  rules:
    - when: manual