- text: |

      ## Overview
      - Jtable helps you render tables from key/list/value sources like JSON, YAML, and Python objects.
      - Usable as a CLI tool, Jinja filter, or Python module (integrates with Ansible, Django, Flask, etc.)

      ---

      ## Features
      - Render tables from JSON, YAML, or Python objects
      - CLI, Jinja filter, or Python import
      - Conditional coloring and formatting
      - Advanced selection, filtering, and transformation with query files
      - Output formats: plain, JSON, HTML, GitHub, LaTeX, etc.
      - Multi-file loading and aggregation
      - Integration with Ansible and other Python frameworks
      - Inspect and explore nested data structures

      ---

      ## Screenshot: Conditional Styling

      ![Colored Table Example](./uptime_view_colored.png)

      ---

      ## CLI Commands and Options
      
      ### Commands
      - `load_json <file>` : Load a single JSON file (or from stdin)
      - `load_yaml <file>` : Load a single YAML file (or from stdin)
      - `load_json_files <patterns...>` : Load multiple JSON files using glob patterns
      - `load_yaml_files <patterns...>` : Load multiple YAML files using glob patterns
      
      ### Options
      - `-p, --json_path` : Specify a path in the input data
      - `-s, --select` : Select columns/fields to display
      - `-us, --unselect` : Exclude columns/fields
      - `-w, --when` : Filter rows by condition (e.g. `state == 'alive'`)
      - `-f, --format` : Output format (simple, json, th, td, html, github, etc.)
      - `-q, --query_file` : Load a query file (YAML)
      - `--inspect` : Inspect and display all paths/values in the input
      - `-vq, --view_query` : Show the generated query
      - `-o, --stdout` : Override output filter
      - `-pf, --post_filter` : Apply an additional filter to the output
      - `--version` : Show version
      - `-v, --verbose` : Verbosity level
      - `-d, --debug` : Debug mode
      - `-h, --help` : Show help

      ---

      ## Simple Usage

# - name: "json coming from curl"
#   play_cmd: curl -s https://samples-files.com/samples/Code/json/sample3.json | jtable -p books
#   box_as: text
#   # collapse: command & output

# - eval_cmd: curl -s https://samples-files.com/samples/Code/json/sample3.json
#   box_as: json
#   # collapse: json returned by curl cmd

- text: |
    ### display a list of dictionnaries as a table
    Considering the following dataset you want to display as a table  

- eval_cmd: cat host_list_of_dict.yml
  text: "```file: host_list_of_dict.yml```"
  box_as: yaml
  # collapse: dataset sample

- play_cmd: cat host_list_of_dict.yml  | jtable
  box_as: text
  # collapse: command & output

- text: |
    #### display dictionnaries of dictionnaries as a table

- play_cmd: cat host_dict_of_dict.yml  | jtable
  box_as: text
  # collapse: command & output

- text: |
    ## Loading Files with Commands
    
    ### Load single files
    Instead of piping files, you can use the new command syntax:

- play_cmd: jtable load_json host_list_of_dict.json
  box_as: text
  # collapse: command & output

- play_cmd: jtable load_yaml host_list_of_dict.yml
  box_as: text
  # collapse: command & output

- text: |
    ### Load from stdin (when no file specified)
    When no file is provided, the commands read from stdin:

- play_cmd: cat host_list_of_dict.yml | jtable load_yaml
  box_as: text
  # collapse: command & output

- text: |
    ## Use path  
    This argument allow you accessing  your dataset when located under a key or a list  
    example when datset under a key:  

- eval_cmd: cat host_list_of_dict_in_key.yml
  text: "```host_list_of_dict_in_key.yml```"
  box_as: yaml
  # collapse: dataset sample

- text: |
    #### access to key in path

- play_cmd: cat host_list_of_dict_in_key.yml  | jtable -p hosts
  box_as: text
  # collapse: command & output

- text: |
    ### Inspect Option
    Here is what would look to if the path is omitted:  

- play_cmd: cat host_list_of_dict_in_key.yml | jtable
  box_as: text
  # collapse: command & output

- text: |
    It looks to nothing... :)  
    Here is the way to inspect what is inside your dataset.  
    All paths are covered until meeting a value, the path is display on the lef and the value on the right.

- text: |
    #### Inspect inputs command

- play_cmd: cat host_list_of_dict_in_key.yml  | jtable --inspect
  box_as: text
  # collapse: command & output

- eval_cmd: cat key_containing_space.yml
  box_as: yaml
  # collapse: dataset sample

- play_cmd: "cat key_containing_space.yml | jtable -p \"region.East['Data Center'].dc_1.hosts\""
  box_as: text
  # collapse: command & output

- text: |
    ## Use query file
    if you want to hide, show a given filter you have to build a query file
    You can display the query and redirect it to a given file using the following option:

- text: |
    #### view_query option

- play_cmd: "cat key_containing_space.yml | jtable -p \"region.East['Data Center'].dc_1.hosts\" --view_query"
  box_as: yaml
  # collapse: command & output

- text: "### Query file sample:"

- eval_cmd: cat host_list_of_dict_in_key.yml
  box_as: yaml
  # collapse: dataset sample

- play_cmd: "cat host_list_of_dict_in_key.yml  | jtable play select_host_basic.yml"
  box_as: text
  # collapse: command & output

- text: |
    ## Transform table content using Jinja  
    Your data may not arrived exatcly how you want to represent them.  
    In fact they never arrived as you want.  
    The following example transform the uptime coming in seconds to days

- text: |
    #### Transform uptime coming in seconds to days

- eval_cmd: cat uptime_dataset.yml
  box_as: yaml
  # collapse: the dataset

- eval_cmd: cat uptime_view.yml
  box_as: yaml
  # collapse: the query

- play_cmd: cat uptime_dataset.yml | jtable play uptime_view.yml
  box_as: text
  # collapse: command & output

- text: |
    ## Use variables in your query file
    this will helps to make mapping table, or behalf like view

- text: |
    #### Use variables mapping table or view

- eval_cmd: cat uptime_view_with_views.yml
  box_as: yaml
  # collapse: the query

- play_cmd: cat uptime_dataset.yml | jtable play uptime_view_with_views.yml
  box_as: text
  # collapse: command & output

- text: |
    ## Name incoming attributes in namespace using **path** syntaxe ```stdin.hosts{item}```
    This feature will help you for the suite describe after to add more context in your  
    and avoid your variable coming from your input and the ones present.

- text: |
    #### Store data in a namespace using path syntaxe stdin.hosts{```item```}

- text: |
    ```
    cat uptime_dataset.yml | jtable play name_incoming_attribute.yml
    ```
  # collapse: The command

- eval_cmd: cat name_incoming_attribute.yml
  box_as: yaml
  # collapse: the query

- text: |
    #### store parent key using path syntaxe "stdin.regions{region}.dc{dc_name}{host}"

- eval_cmd: cat region_dataset.yml
  box_as: yaml
  # collapse: the dataset

- play_cmd: 'cat region_dataset.yml | jtable play region_view.yml'
  box_as: bash
  # collapse: command & output

- eval_cmd: cat region_view.yml
  box_as: yaml
  # collapse: the query

- text: "## Use jtable with Ansible"
- text: "The playbook"

- eval_cmd: cat ansible_playbook_example.yml
  box_as: yaml

# - play_cmd: 'ansible-playbook ansible_playbook_example.yml'
#   # collapse: command & output
#   box_as: bash

- text: "## Load multiple files with glob patterns"

- text: "Using the new `load_yaml_files` command to load multiple files with glob patterns. Considering the files below returned by ```ls -1 data/*/*/config.yml```"
  eval_cmd: "ls -1 data/*/*/config.yml"
  box_as: text

- text: cat data/dev/it_services/config.yml
  eval_cmd: cat data/dev/it_services/config.yml
  box_as: yaml

- play_cmd: 'jtable load_yaml_files "{input}:data/*/*/config.yml" --play load_multi_json_queryset.yml'
  # collapse: command & output
  box_as: bash

- box_as: yaml
  eval_cmd: cat load_multi_json_queryset.yml
  # collapse: The query

- text: |
    ### Load multiple JSON files
    Similarly, you can use `load_json_files` for JSON files:

- play_cmd: 'jtable load_json_files "data/*/*/config.json" play load_multi_json_queryset.yml'
  # collapse: command & output
  box_as: bash

- text: "# Embded filters"

- text: |
    #### strf_time

- box_as: yaml
  eval_cmd: cat strf_time_example.yml
  box_as: bash
  # collapse: dataset & query

- play_cmd: jtable play strf_time_example.yml
  box_as: bash
  # collapse: command & output

- text: "# Conditional styling"

- text: |
    #### Styling option

- play_cmd: "jtable play uptime_view_colored.yml -f github"
  # box_as: bash
  # collapse: dataset & query

# - name: Styling view screenshot
#   eval_cmd: "../../screenshot.py -i jack.html -o jack.png"
#   box_as: bash
#   # collapse: dataset & query

- text: |
    #### Ansible again

- play_cmd: |
    export ANSIBLE_FILTER_PLUGINS=./ansible_filter && \
    export ANSIBLE_ACTION_WARNINGS=False && \
    export ANSIBLE_STDOUT_CALLBACK=debug && \
    export ANSIBLE_INVENTORY=./local_inv && \
    ansible-playbook ansible_playbook_example.yml
  
  box_as: bash
  # collapse: dataset & query

- text: "![uptime_view_colored](./uptime_view_colored.png)"


# - text: "# Html"

# - text: |
#     $`\textcolor{red}{\text{your text}}`$ 
#     f1  | f2 | f3
#     -- | -- | --
#     vince | touch | john
#     $`\textcolor{red}{\text{redmon}}`$  | touch | john

#     - `#F00` fejfje
#     - `#F00A ejfkfklze`
#     - `#FF0000`
#     - `#FF0000AA`
#     - `RGB(0,255,0)`
#     - `RGB(0%,100%,0%)`
#     - `RGBA(0,255,0,0.3)`
#     - `HSL(540,70%,50%)`
#     - `HSLA(540,70%,50%,0.3)`  
    
#     I need to highlight these ==very important words==.


#     coucou `#F00` bob
#     <pre>
#     <span color="red">red</span>
#       <span color="orange">orange</span>
#     <span color="yellow">yellow</span>
#       <span color="lime">lime</span>
#     <span color="green">green</span>
#       <span color="turquoise">turquoise</span>
#       <span color="cyan">cyan</span>
#     <span color="blue">blue</span>
#       <span color="purple">purple</span>
#       <span color="magenta">magenta</span>
#     <span color="red">red</span>
#     </pre>